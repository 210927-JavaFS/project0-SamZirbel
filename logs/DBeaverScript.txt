

DROP TABLE IF EXISTS login;
DROP TABLE IF EXISTS gardenaccount;
DROP TABLE IF EXISTS tree;
DROP TABLE IF EXISTS plantingdata;


CREATE TABLE plantingdata(
	plantinggroup VARCHAR(10) PRIMARY key,
	yearplanted INTEGER,
	monthplanted INTEGER,
	dayplanted INTEGER
	);

CREATE TABLE tree(
	treeid serial PRIMARY KEY,
	branches INTEGER,
	flowers INTEGER,
	birdfeeders INTEGER,
	plantinggroup VARCHAR(10) REFERENCES plantingdata (plantinggroup) NOT NULL
	);

CREATE TABLE gardenaccount(
	account serial PRIMARY KEY,
	firstname varchar(20),
	lastname varchar(20),
	treeid INTEGER REFERENCES tree (treeid),
	gardenstatus VARCHAR(30),
	accounttype VARCHAR(50)
	);

CREATE TABLE login(
	username VARCHAR(30) PRIMARY KEY,
	userpassword VARCHAR(30),
	account serial REFERENCES gardenaccount (account) NOT NULL UNIQUE
	);



INSERT INTO gardenaccount (firstname, lastname, treeid, gardenstatus, accounttype)
VALUES ('Augustus', 'Ceazar', null, 'Approved', 'Owner');

-- Password Is Pass001
-- When Encrypted Using Method Pass001 = úËÙÙšš›
-- If Not Working Ensure Use Of 10101010
INSERT INTO login (username, userpassword)
VALUES ('User001', 'úËÙÙšš›');




INSERT INTO plantingdata (plantinggroup, yearplanted, monthplanted, dayplanted)
VALUES (1, 1968, 4, 13),
(2, 2006, 6, 12), 
(3, 1992, 10, 10), 
(4, 1976, 2, 30), 
(5, 2014, 1, 18), 
(6, 1997, 7, 7), 
(7, 2006, 6, 24), 
(8, 1988, 2, 16), 
(9, 2000, 5, 29), 
(10, 1971, 8, 13);



-- Function Body Is $BODY$ Indicated

CREATE OR REPLACE FUNCTION increase_flowers()
RETURNS TRIGGER AS 
$BODY$
BEGIN 
	UPDATE tree 
	SET flowers = flowers + 1;
	RETURN NEW;
END
$BODY$
LANGUAGE plpgsql;

--plpgsql : standard language

-- New : WHatever REcord Triggers The Trigger

CREATE TRIGGER increase_flowers
AFTER INSERT ON tree
FOR EACH ROW EXECUTE PROCEDURE increase_flowers();


